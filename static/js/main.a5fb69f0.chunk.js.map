{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","_this","Object","_home_yakhousam_Desktop_javascript_FCC_Projects_Frameworks_Projects_calculator_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_home_yakhousam_Desktop_javascript_FCC_Projects_Frameworks_Projects_calculator_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_yakhousam_Desktop_javascript_FCC_Projects_Frameworks_Projects_calculator_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","handleClick","btn","formula","state","input","length","test","replace","concat","setState","calc","result","Math","round","eval","_this2","addEventListener","e","preventDefault","key","includes","removeEventListener","_this3","react__WEBPACK_IMPORTED_MODULE_5___default","className","href","id","map","onClick","Component"],"mappings":"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","file":"static/js/main.a5fb69f0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from \"react\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      formula: \"0\",\n      input: \"0\"\n    };\n  }\n  calc(formula) {\n    formula = formula\n      .replace(/(.)([//*+/-])$/, \"$1\")\n      .replace(/×/g, \"*\")\n      .replace(/÷/g, \"/\");\n    // eslint-disable-next-line \n    let result = Math.round(10000000000 * eval(formula)) / 10000000000;\n    formula = formula.replace(/[*]/g, \"×\").replace(/[//]/g, \"÷\");\n    return {\n      formula: formula + \"=\" + result,\n      input: result\n    };\n  }\n  componentDidMount() {\n    document.addEventListener(\"keypress\", e => {\n      e.preventDefault();      \n      let key = e.key\n        .replace(\"/\", \"÷\")\n        .replace(\"*\", \"×\")\n        .replace(\"Enter\", \"=\")\n        .replace(\"Escape\", \"AC\")\n        .replace(\"Backspace\", \"⌫\");\n      if (btn.includes(key)) {\n        this.handleClick(key);\n      }\n    });\n  }\n  componentWillUnmount() {\n    document.removeEventListener(\"keypress\");\n  }\n\n  handleClick = btn => {\n    let formula = this.state.formula;\n    let input = this.state.input;\n\n    if (input.length > 10 && /\\d/.test(btn)) {\n      return;\n    }\n\n    if (btn === \"=\") {\n      if (/=/g.test(formula)) {\n        return;\n      }\n      this.setState(this.calc(formula));\n      return;\n    }\n\n    if (/=/.test(formula) && /[\\d.]/.test(btn)) {\n      input = \"0\";\n      formula = \"0\";\n    }\n    formula = (formula + btn)\n      .replace(/.*AC/, \"\")\n      .replace(/(.*)(.)⌫/, \"$1\")\n      .replace(/(.+=)(.+)/, \"$2\")\n      .replace(/^[0÷×+]+/, \"\")\n      .replace(/^[.]/, \"0.\")\n      .replace(/([÷×+/-])[.]/, \"$1\".concat(\"0.\"))\n      .replace(/(\\D)(\\D)/, \"$2\")\n      .replace(/(\\d+[.]\\d+)[.]/, \"$1\")\n      .replace(/(.+=)(.+)/, \"$2\");\n\n    input = (input + btn)\n      .replace(/.*AC/, \"\")\n      .replace(/(.*)(.)⌫/, \"$1\")\n      .replace(/^[0]/, \"\")\n      .replace(/^[.]/, \"0.\")\n      .replace(/(.*)([^.\\d])/, \"$2\")\n      .replace(/(\\D)*(.)/, \"$2\")\n      .replace(/[.]+/g, \".\")\n      .replace(/(\\d+[.]\\d+)[.]/, \"$1\")\n      .replace(/^[.]/, \"0.\");\n    this.setState({\n      formula: formula === \"\" ? \"0\" : formula,\n      input: input === \"\" ? \"0\" : input\n    });\n    return;\n  };\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"about\">\n          Coded by{\" \"}\n          <a href=\"https://github.com/yakhousam/Calculator-React\">yakhousam</a>\n        </div>\n        <div id=\"formula\">{this.state.formula}</div>\n        <div id=\"display\">{this.state.input}</div>\n\n        {btn.map(btn => (\n          <button\n            className=\"btn\"\n            key={btn}\n            id={btn}\n            onClick={() => this.handleClick(btn)}\n          >\n            {btn}\n          </button>\n        ))}\n      </div>\n    );\n  }\n}\nconst btn = [\n  \"AC\",\n  \"⌫\",\n  \"÷\",\n  \"7\",\n  \"8\",\n  \"9\",\n  \"×\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"-\",\n  \"1\",\n  \"2\",\n  \"3\",\n  \"+\",\n  \"0\",\n  \".\",\n  \"=\"\n];\n\nexport default App;\n"],"sourceRoot":""}